#!/usr/bin/env bash

set -e

BASHCMD="dock"
COMPOSE="docker-compose"
SEDCMD="sed -i .bak"

## COLORS
RED='\033[0;31m'
NC='\033[0m' # No Color
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'

# Is Docker running?
if ! docker info > /dev/null 2>&1; then
    echo -e "${RED}Error: Docker is not running${NC}" >&2

    exit 1
fi

# Check if we have installed Dock
if ! test -f "docker-compose.yml"; then
    echo "Setting up Dock..."

    php artisan dock:install
fi

# Is the environment running
PSRESULT="$(docker-compose ps -q)"
if docker-compose ps | grep 'Exit' &> /dev/null; then
    docker-compose down > /dev/null 2>&1
    EXEC="no"
elif [ -n "$PSRESULT" ]; then
    EXEC="yes"
else
    EXEC="no"
fi

function notRunning {
    echo -e "${RED}Notice: Dock is not running.${NC} Run: 'dock up'" >&2
    exit 1
}

# wait for mysql to be ready
function waitForMysql {
    while ! docker-compose exec mysql mysqladmin --user=root --password=root --host "127.0.0.1" ping --silent &> /dev/null ; do
        echo -e "${PURPLE}Waiting for mysql database connection...${NC}"
        sleep 1
    done
}

function startWorker() {
    echo "Starting queue worker..."
    osascript -e 'tell application "Terminal" to do script "cd '$PWD' && docker-compose exec php php artisan queue:work --tries=1"'
    echo -e "${GREEN}Created a Terminal window and started queue worker! ${NC}"
}

# BUILD
if [ "$1" = "build" ]; then
    echo "Building containers..."
    docker-compose build
    echo -e "${GREEN}Successfully built! ${NC}"
    exit 0
fi

# UP
if [ "$1" == "up" ] || [ "$1" == "start" ]; then
    echo "Upping containers..."
    docker-compose up -d --remove-orphans

    waitForMysql

    echo "Migrating..."
    docker-compose exec php php artisan migrate
    echo -e "${GREEN}Successfully upped and migrated! ${NC}"

    exit 0
fi

# DOWN
if [ "$1" == "down" ] || [ "$1" == "stop" ]; then
    echo "Downing containers..."
    docker-compose stop
    echo -e "${GREEN}Stopped successfully! ${NC}"
    exit 0
fi

# INSTALL
if [ "$1" = "install" ]; then

    if [ ! -f .env ]; then
        echo "${RED}Error: No .env file found within current working directory $(pwd)"
        echo "Create a .env file before re-initializing ${NC}"
        exit 0
    fi

    echo "Upping containers"
    docker-compose up -d --remove-orphans

    waitForMysql

    echo "installing composer dependencies"
    docker-compose exec php composer install

    echo "Migrating"
    docker-compose exec php php artisan migrate

    echo "Seeding"
    docker-compose exec php php artisan db:seed

    echo -e "${GREEN}Completed successfully! Data have been created ${NC}"
    exit 0
fi

# MIGRATE
if [ "$1" = "migrate" ]; then
    waitForMysql

    docker-compose exec php php artisan migrate
    echo -e "${GREEN}Successfully migrated and synced ${NC}"
    exit 0
fi

# REMOVE
if [ "$1" = "remove" ]; then
    echo "Removing containers, volumes, network..."
    docker-compose down -v
    echo -e "${GREEN}Successfully stopped and removed ${NC}"
    exit 0
fi

# RESET
if [ "$1" = "reset" ]; then

    echo "Removing containers, volumes, network..."
    docker-compose down -v
    echo "${GREEN}Successfully removed!${NC}"

    echo "Building containers..."
    docker-compose build
    echo "${GREEN}Successfully built!${NC}"

    echo "Upping containers..."
    docker-compose up -d --remove-orphans
    echo "${GREEN}Successfully upped!${NC}"

    waitForMysql

    echo "Installing..."
    docker-compose exec php php artisan migrate --seed

    echo -e "${GREEN}Successfully reset${NC}"
    exit 0
fi

# SSH
if [ "$1" = "ssh" ]; then
    docker-compose exec php /bin/bash
    exit 0
fi

# Redis
if [ "$1" = "redis" ]; then
    docker-compose exec redis redis-cli
    exit 0
fi

# TINKER
if [ "$1" == "tinker" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        docker-compose exec php php artisan tinker
    else
        notRunning
    fi
    exit 0
fi

# Clear Cache
if [ "$1" == "cc" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        docker-compose exec php php artisan cache:clear "$@"
    else
        notRunning
    fi
    exit 0
fi

# route list
if [ "$1" == "rl" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        docker-compose exec php php artisan route:list "$@"
    else
        notRunning
    fi
    exit 0
fi

# ARTISAN
if [ "$1" == "artisan" ] || [ "$1" == "art" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        docker-compose exec php php artisan "$@"
    else
        notRunning
    fi
    exit 0
fi

# COMPOSER
if [ "$1" == "composer" ] || [ "$1" == "c" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        docker-compose exec php composer "$@"
    else
        notRunning
    fi
    exit 0
fi

# DUSK
if [ "$1" == "dusk" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        # Using env LARAVEL_SAIL=1 for supporting the default DuskTestCase prepare()
        docker-compose exec -e "LARAVEL_SAIL=1" -e "APP_URL=http://php" -e "DUSK_DRIVER_URL=http://selenium:4444/wd/hub" php php artisan dusk "$@"
    else
        notRunning
    fi
    exit 0
fi

# DUSK FAILS
if [ "$1" == "dusk-fails" ]; then
   shift 1
    if [ "$EXEC" == "yes" ]; then
        # Using env LARAVEL_SAIL=1 for supporting the default DuskTestCase prepare()
        docker-compose exec -e "LARAVEL_SAIL=1" -e "APP_URL=http://php" -e "DUSK_DRIVER_URL=http://selenium:4444/wd/hub" php php artisan dusk:fails "$@"
    else
        notRunning
    fi
    exit 0
fi

# MYSQL
if [ "$1" == "ssh-mysql" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        docker-compose exec mysql bash -c 'MYSQL_PWD=${MYSQL_PASSWORD} mysql -u ${MYSQL_USER} ${MYSQL_DATABASE}'
    else
        notRunning
    fi
    ## Debug MySQL
    ## SET GLOBAL general_log = 'ON';
    ## SHOW VARIABLES LIKE "general_log%";
    ## ssh into mysql container
    ## tail -f PATH/TO/FILE.log
    ## SET GLOBAL general_log = 'OFF';
    exit 0
fi

# Worker
if [ "$1" == "worker" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        startWorker
    else
        notRunning
    fi
    exit 0
fi

# Logs
if [ "$1" == "logs" ] || [ "$1" == "logs-php" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        docker logs $(docker ps --filter name=php --format "{{.ID}}")
    else
        notRunning
    fi
    exit 0
fi

if [ "$1" == "logs-mysql" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        docker logs $(docker ps --filter name=mysql --format "{{.ID}}")
    else
        notRunning
    fi
    exit 0
fi

if [ "$1" == "logs-queue" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        docker logs $(docker ps --filter name=queue --format "{{.ID}}")
    else
        notRunning
    fi
    exit 0
fi

if [ "$1" == "logs-redis" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        docker logs $(docker ps --filter name=redis --format "{{.ID}}")
    else
        notRunning
    fi
    exit 0
fi

##########
### JS ###
##########
if [ "$1" == "node" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        docker-compose exec php node "$@"
    else
        notRunning
    fi
    exit 0
fi

if [ "$1" == "npm" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        docker-compose exec php npm "$@"
    else
        notRunning
    fi
    exit 0
fi

if [ "$1" == "npx" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        docker-compose exec php npx "$@"
    else
        notRunning
    fi
    exit 0
fi

if [ "$1" == "yarn" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        docker-compose exec php yarn "$@"
    else
        notRunning
    fi
    exit 0
fi

if [ "$1" == "expose" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        docker run --init beyondcodegmbh/expose-server share http://host.docker.internal:"$APP_PORT" \
            --server-host=dock.test.site \
            --server-port=8080 \
            "$@"
    else
        notRunning
    fi
    exit 0
fi

# INFO
if [ "$1" != "" ]; then
    echo -e " "
    echo -e "${RED}Error: Command not found${NC}"
    echo -e " "
    echo -e "------"
    echo -e " "
    echo -e "${YELLOW}Available commands for Viezel Dock: ${NC}"
fi

echo -e " "
echo -e "${YELLOW}Docker commands: ${NC}"
echo -e " ${GREEN}"
echo -e "  * build      building containers"
echo -e "  * install    install the app for the first time"
echo -e "  * up         start containers"
echo -e "  * start      start containers"
echo -e "  * down       stop containers"
echo -e "  * stop       stop containers"
echo -e "  * reset      resetting containers. Careful - you are deleting everything"
echo -e "  * remove     removing containers. Careful - you are deleting everything"
echo -e "  * logs       view logs from PHP and Nginx. Use '--follow' to tail it"
echo -e "  * logs-mysql view logs from MySQL. Use '--follow' to tail it"
echo -e "  * logs-queue view logs from the queue. Use '--follow' to tail it"
echo -e "  * logs-redis view logs from Redis. Use '--follow' to tail it"
echo -e " ${NC}"
echo -e "------"
echo -e " "
echo -e "${YELLOW}Laravel commands: ${NC}"
echo -e " ${GREEN}"
echo -e "  * ssh        SSH into laravel"
echo -e "  * ssh-mysql  SSH into mysql"
echo -e "  * dusk       run dusk tests. '$BASHCMD dusk' or append: '$BASHCMD dusk --group=foo' "
echo -e "  * dusk-fails run dusk failing tests"
echo -e "  * c          run composer commands. '$BASHCMD c dump-autoload'"
echo -e "  * composer   run composer commands. '$BASHCMD composer dump-autoload'"
echo -e "  * art        run artisan commands. '$BASHCMD art cache:clear'"
echo -e "  * artisan    run artisan commands."
echo -e "  * tinker     run tinker"
echo -e "  * worker     start a new queue worker"
echo -e "  * cc         clear cache"
echo -e "  * rl         route list. '$BASHCMD rl --path=api/foo/bar'"
echo -e "  * migrate    migrate the app"
echo -e "  * redis      start redis cli"
echo -e "  * expose     share site via Expose"
echo -e " ${NC}"
echo -e "------"
echo -e " "
echo -e "${YELLOW}JS commands: ${NC}"
echo -e " ${GREEN}"
echo -e "  * node       run node commands"
echo -e "  * npm        run npm commands"
echo -e "  * npx        run npx commands"
echo -e "  * yarn       run yarn commands"
echo -e " ${NC}"
echo -e "------"
echo -e " "
echo -e "${YELLOW}Run the commands like: ${NC}"
echo -e " "
echo -e "$BASHCMD COMMAND"
echo -e " "
